attr Program
  syn instanceLV :: {Instance (S.Set Var)}

sem Program
  | Program
    lhs.instanceLV = {
      ( ( S.isSubsetOf, S.union, S.empty )
        , @procs.transferLV `M.union` @stat.transferLV
        , S.empty
        , @loc.finals
        , @loc.flowR
        , @loc.interFlowR
        )
    }

attr Stat Proc Procs
  syn transferLV use {M.union} {M.empty} :: {M.Map Label (TransferFunction (S.Set Var))}

sem Stat
  | Skip Continue Break BAssign
    loc.killLV = id
    loc.genLV  = id
  | IAssign
    loc.killLV = S.delete @name
    loc.genLV  = S.union (exprVars (I @val.copy))
  | While IfThenElse
    loc.killLV = id
    loc.genLV  = S.union (exprVars (B @cond.copy))
  | Skip Continue Break IAssign IfThenElse While
    +transferLV = M.insert @loc.label (Unary (@loc.genLV . @loc.killLV))
  | Call
    +transferLV = M.insert @labelCall   (error "Transfer functions are not supported in maximal fixed point iteration")
    +transferLV = M.insert @labelReturn (error "Transfer functions are not supported in maximal fixed point iteration")

sem Proc
  | Proc
    +transferLV = M.insert @labelEntry (error "Transfer functions are not supported in maximal fixed point iteration")
    +transferLV = M.insert @labelExit  (error "Transfer functions are not supported in maximal fixed point iteration")
